1. Given two files:
1. class One {
2. 	public static void main(String[] args) {
3. 		int assert = 0;
4. 	}
5. }
1. class Two {
2. 	public static void main(String[] args) {
3. 		assert(false);
4. 	}
5. }
And the four command-line invocations:
javac -source 1.3 One.java
javac -source 1.4 One.java
javac -source 1.3 Two.java
javac -source 1.4 Two.java
What is the result? (Choose all that apply
.)
A. Only one compilation will succeed
B. Exactly two compilations will succeed
C. Exactly three compilations will succeed
D. All four compilations will succeed
E. No compiler warnings will be produced
F. At least one compiler warning will be produced



































































Answer:
B and F are correct. Class One will compile 
(and issue a warning) using the 1.3 flag, 
and class Two will compile using the 1.4 flag.
A, C, D, and E are incorrect based on the above. 
(Objective 2.3)

Mi Respuesta:
La tuve mal elegí C y F. La F está bien porque se que
para el java 1.3 hacia abajo assert se puede usar como
palabra en un identificador de variable, y solo nos lanza
una advertencia, sin embargo la C esta mal porque no son 3
sino solo 2 los que fallan al compilar

Truco
Debemos aprendernos que para source 1.3 si el assert
es un identificador entonces el codigo compila con
adevertencias, pero si lo usamos como una palabra
reservada el código no compila, ya que para java  1.3
hacia abajo aun no estaba implemnetado lo de los asserts.

Ahora si es de la 1.4 hacia arriba entonces:
si se usa assert como un identificador la compilación falla,
pero si se usa como keyword el codigo si Compila.

Con que nos aprendamos esto la armamamos.