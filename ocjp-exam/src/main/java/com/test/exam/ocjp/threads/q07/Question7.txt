Which are true? (Choose all that apply.)
A. The notifyAll() method must be called from a synchronized context
B. To call wait(), an object must own the lock on the thread
C. The notify() method is defined in class java.lang.Thread
D. When a thread is waiting as a result of wait(), it release its lock
E. The notify() method causes a thread to immediately release its lock
F. The difference between notify() and notifyAll() is that notifyAll() notifies all waiting threads, regardless of the object they're waiting on







































Answer:
A is correct because notifyAll() (and wait() and notify()) must be called from 
within a synchronized context. D is a correct statement.

B is incorrect because to call wait(), the thread must own the lock on the object 
that wait() is being invoked on, not the other way around. 
C is wrong because notify() is defined in java.lang.Object.
E is wrong because notify() will not cause a thread to release its locks.
The thread can only release its locks by exiting the synchronized code. 
F is wrong because notifyAll() notifies all the threads waiting on a particular locked object, 
not all threads waiting on any object. (Objective 4.4)





Truco 1.
"must own the lock on the thread"- debe tener su propio lock/monitor en el Thread 
"must own the lock on the object"- debe tener su propio lock/monitor en el Objeto

Esto es importante ya que por la traducción puede confundir pero uno se refiere al thread actual
y otro al objeto actual

Ahora analizaremos cada una de las opciones

B es incorrecto porque nos dice "To call wait(), an object must own the lock on the thread"
  y en base a la traducción que puse arriba wait no tiene su propio lock en el thread sino mas bien en el objeto
  que lo está invocando.
  
C es incorrecto  está  fácil ya que el método notify está definido en la clase Object, no en la de Thread.

E es incorrecto porque notify no causa que un thread libere su monitor/lock, la única manera de que
	un thread puede liberar su lock/monitor es cuando se sale de un bloque synchronized

F. es incorrecto y tiene truco de traducción tambien, ya que nos indica que notifyAll notifica a todos
	los threads que esten esperando, idependientemente del objeto que esta esperando. Pero esto es alrevez
	ya que notifyAll notifica a todos los threads que esten esperando el lock de un monitor. No todos
	los threads esperan la notificación de todos los objetos, solo del que tienen el lock.
	
A es la respuesta correcta ya que notify notifyAll y wait deben ser invocados en un contesto
	Synchronized 

D también es una afirmación correcta cuando se invoca a wait y este onjeto tiene ocupado su lock
	al ejecutar wait este libera el lock para que otro thread lo tome.

